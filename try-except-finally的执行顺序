# coding=utf-8
#时间：2017.4.13
#地点：lab211
#在 try 中 raise一个异常，就立刻转入 except 中执行，在except 中遇到 return 时，就强制转到 finally 中执行， 在 finally 中遇到 return 时就返回

def test1():
    try:
        print('搞事情')
        raise Exception('呵呵')  #raise一个异常，立刻转入except中
        print('to return in try')#不执行这句话
        return '这是try'
    except Exception:
        print('process except')
        print('to return in except')
        return '这是except'  #在except中遇到return时，就强转制到finally中
                            #执行，在finally中遇到return就返回
    finally:
        print('to return in finally')
        return '这是finally'   #真正返回的是这一句话！！！

test1Return = test1()
print('test1Return : ' + test1Return)




#这里在 try 中没有抛出异常，因此不会转到 except 中，但是在try 中遇到return时，
#也会立即强制转到finally中执行，并在finally中返回
def test2():
    try:
        print('to do stuff')
        print('to return in try')
        return 'try'              #遇到return是，强制转到finally中执行
    except Exception:
        print('process except')
        print('to return in except')
        return 'except'
    finally:
        print('to return in finally')
        return 'finally'

test2Return = test2()
print('test1Return : ' + test2Return)


#综上两个例子，无论是在try还是在except中，遇到return时，只要设定了finally语句，就会中断当前的return语句，跳转到finally中执行，
#如果finally中遇到return语句，就直接返回，不再跳转回try/excpet中被中断的return语句

def test3():
    i = 0
    try:
        i += 1
        print('i in try : %s'%i)
        raise Exception('hehe')
    except Exception:
        i += 1
        print('i in except : %s'%i)
        return i
    finally:
        i += 1
        print ('i in finally : %s'%i )

print('test3Return : %s'% test3())


def test4():
    i = 0
    try:
        i += 1
        return i
    finally:
        i += 1
        print ('i in finally : %s'%i )
print('test4Return : %s' % test4())

#test3和test4的例子说明在except和try中遇到return时，会锁定return的值，然后跳转到finally中，如果finally中没有return语句，
#则finally执行完毕之后仍返回原return点，将之前锁定的值返回(即finally中的动作不影响返回值)，如果finally中有return语句，
#则执行finally中的return语句。

def test5():
    for i in range(5):
        try:
            print('do stuff %s'%i)
            raise Exception(i)
        except Exception:
            print('exception %s'%i)
            continue
        finally:
             print('do finally %s'%i)
test5()

#test5得出的结论是:在一个循环中，最终要跳出循环之前，会先转到finally执行，执行完毕之后才开始下一轮循环

